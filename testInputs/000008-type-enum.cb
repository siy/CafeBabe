type Bool = True | False;

pub type Option<T> = Just<T> | Nothing<T> {
    const Nothing NOTHING = nothing();

    Option<R> map(T -> R mapper);
    Option<R> flatMap(T -> Option<R> fMapper);
    R fold(T -> R presentMapper, () -> R nothingMapper);

    static Option<T> option(T value) = just(value);
    static Option<_> empty() = NOTHING;

    class Just {
        impl map(mapper) = just(mapper(value));
        impl flatMap(fMapper) = fMapper(value);
        impl fold(presentMapper, nothingMapper) = presentMapper(value);
    }

    class Nothing {
        impl map(mapper) = this;
        impl flatMap(mapper) = this;
        impl fold(presentMapper, nothingMapper) = nothingMapper();
    }
}
