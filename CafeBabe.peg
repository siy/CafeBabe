# Pure PEG grammar

Program <- Use* Constant* Type* Extension* Function* Unsafe* Test* eof
Use <- 'use' QualifiedName ImportList? Semicolon
Constant <- Public? 'const' ('val' / TypeName) Name '=' Expression Semicolon
Type <- AnnotationRef* Public? 'type' TypeName '=' TypeDecl
Extension <- Public? 'extend' TypeName ApiRefs? ClassBlock
Function <- AnnotationRef* Public? Method
Unsafe <- 'unsafe' BlockStart Constant* Type* Extension* Function* Test* BlockEnd
Test <- 'test' BlockStart Constant* Type* Extension* Function* Unsafe* BlockEnd
TypeDecl <- ApiDecl / AnnotationDecl / TypeAliasDecl / CompoundTypeDecl / TupleDecl / ClassDecl
ImportList <- BlockStart NameWithAlias (Comma NameWithAlias)* BlockEnd
NameWithAlias <- Name ('as'  Name)?
AnnotationRef <- '@' Name (LP ExpressionList? RP)?
ExpressionList <- Expression (Comma Expression)*
TupleDecl <- LP TypeName? (Comma TypeName)* OptionalEllipsis? RP Semicolon
ApiDecl <- 'api' CommonApiBody
TypeAliasDecl <- ArgumentType Semicolon
AnnotationDecl <- 'annotation' TypedArgDecl AnnotationBody
AnnotationBody <- BlockStart Statement* BlockEnd
CompoundTypeDecl <- (AndType / OrType)? (Semicolon / CommonApiDecl)
AndType <- TypeName (Comma TypeName)+
OrType <- TypeName (BitOr TypeName)+
OptionalEllipsis <- Comma Ellipsis

CommonApiDecl <- ApiRefs? CommonApiBody
ApiRefs <- Colon TypeNameList
CommonApiBody <- BlockStart  Constant* ((MethodSignature Semicolon) / StaticMethodImpl / DefaultMethodImpl)* NamedClassDecl* BlockEnd
MethodSignature <- TypeVarsDecl? (TypedFunction/UntypedFunction)
TypedFunction <- TypeName Name TypedArgDecl
UntypedFunction <- 'fn' Name OptionalNameList
OptionalNameList <- LP NameList? RP

ClassDecl <- 'class' ClassDataDecl? ApiRefs? (ClassBlock / Semicolon)
NamedClassDecl <- Public? 'class' TypeName ClassBody
ClassBody <- TypedArgDecl? ApiRefs? ClassBlock
TypedArgDecl <- LP TypedArgList? RP
ClassDataDecl <- LP ClassFields? RP
ClassFields <- ClassField (Comma ClassField)* OptionalEllipsis?
ClassField <- Mutable? TypedArgument
Mutable <- 'var'
ClassBlock <- BlockStart Constant* Constructor* Destructor? (StaticMethodImpl / Function / MethodImpl)* NamedClassDecl* BlockEnd
StaticMethodImpl <- Public? 'static' Method
DefaultMethodImpl <- 'default' Method
Method <- MethodSignature MethodBody
Constructor <- Public? Name TypedArgDecl MethodBody
Destructor <- Public? '~' Name LP RP MethodBody
Public <- 'pub'

MethodImpl <- 'impl' Name OptionalNameList MethodBody
MethodBody <- MethodExpression / MethodBlockBody
MethodExpression <- '=' Expression Semicolon

MethodBlockBody <- BlockStart Statement* BlockEnd
Statement <- ForStatement / IfExpression / SelectExpression / MatchExpression / ReturnStatement  / BreakStatement / ContinueStatement / VariableDeclaration / Assignment / IterableStatement / MethodBlockBody / ValueStatement
BreakStatement <- 'break' Semicolon
ContinueStatement <- 'continue' Semicolon
ValueStatement <- Value Semicolon
VariableDeclaration <- VarTitle Assignment
VarTitle <- ('val' / 'var' / TypeName)
Assignment <- AssignmentExpr Semicolon
AssignmentExpr <- RegularAssignment / ParallelAssignment
RegularAssignment <- QualifiedName AssignOps Expression
ParallelAssignment <- RequiredNameList '=' (TupleConstruction / Expression)
TupleConstruction <- LP ValueReference? Expression? (Comma Expression)* OptionalEllipsis? RP
RequiredNameList <- LP NameList RP
ForStatement <- 'for' ForSetup MethodBlockBody
ForSetup <- LP VarTitle Name Colon Expression RP
ReturnStatement <- 'return' Expression? Semicolon
IterableStatement <- Iterable Invoke* Semicolon
Invoke <- CallParameters / MethodCall / Index
MethodCall <- '.' QualifiedName Invoke?

TypeName <- Name TypeArguments? BitAnd? ArrayDecl*
ArrayDecl <- LSqB RSqB
TypeArguments <- '<' TypeNameList OptionalEllipsis? '>'
TypeVarsDecl <- '<' LimitedTypeName (Comma LimitedTypeName)* '>'
LimitedTypeName <- Name (Colon TypeName ('+'/'-')?)?
TypeNameList <- TypeName (Comma TypeName)*
TypedArgList <- TypedArgument (Comma TypedArgument)* OptionalEllipsis?
TypedArgument <- ArgumentType Name
ArgumentType <- TypeName (Arrow Ellipsis? TypeName)*
NameList <- Name (Comma Name)*

Expression <- IfExpression / SelectExpression / MatchExpression / TernaryExpression / Expr
IfExpression <- 'if' BooleanExpression MethodBlockBody ('else' MethodBlockBody)?

SelectExpression <- 'select' NestedExpr SelectBody
SelectBody <- BlockStart SelectCase* Default? BlockEnd

MatchExpression <- 'match' NestedExpr MatchBody
MatchBody <- BlockStart MatchCase* Default? BlockEnd

TernaryExpression <- NestedExpr '?' Expression Colon Expression
BooleanExpression <- LP Expression RP
SelectCase <- 'case' CaseExpr Arrow Expression Semicolon
MatchCase <- TypeConstructor Arrow Expression Semicolon
Default <- 'default' Arrow Expression Semicolon
CaseExpr <- NumLiteral / StringLiteral / ObjConstruction
TypeConstructor <- TypeName / TypeArguments

Expr <- Or (LogicalOr Or)*
Or <- And (LogicalAnd And)*
And <- BitwiseOr (BitOr BitwiseOr)*
BitwiseOr <- BitwiseXor (BitXor BitwiseXor)*
BitwiseXor <- BitwiseAnd (BitAnd BitwiseAnd)*
BitwiseAnd <- Equality (EqualityOps Equality)?
Equality <- Compare (Comparison / TypeCheck)?
Comparison <- CompareOps Compare
TypeCheck <- 'isA' TypeConstructor

Compare <- Shift (ShiftOps Shift)*
Shift <- Sum (SumOps Sum)*
Sum <- Product (MulOps Product)*
Product <- (Cast / UnaryOps)* (MethodReference / Value / NestedExpr / Ellipsis)
Cast <- LP TypeName RP
NestedExpr <- LP Expression RP
MethodReference <- QualifiedName? '::' Name

Value <- ValueConstruction Invoke* PostfixOps?
ValueConstruction <- ObjConstruction / ArrayConstruction / TupleConstruction / Lambda / QualifiedName / Iterable / LiteralValue
LiteralValue <- NumLiteral / CharLiteral / StringLiteral
Index <- LSqB Expression RSqB
Lambda <- (SingleParamLambda / MultiparamLambda) Ellipsis? (Expression / MethodBlockBody)
SingleParamLambda <- (Name Arrow)+
MultiparamLambda <- TypeName? CallParameters Arrow

CallParameters <- TypeArguments? (NamedCallParameters/AnonymousCallParameters)
NamedCallParameters <- LP NamedAssignmentList RP
AnonymousCallParameters <- LP (ExpressionList OptionalEllipsis?)? RP
ObjConstruction <- TypeName? ObjConstructionBody
ObjConstructionBody <- BlockStart ValueReference? NamedAssignmentList BlockEnd
NamedAssignmentList <- NamedAssignment (Comma NamedAssignment)*
NamedAssignment <- Name '=' Expression
ValueReference <- QualifiedName Invoke* BitOr
ArrayConstruction <- LSqB ArrayElements?RSqB
ArrayElements <- ExpressionList Comma?
Iterable <- Comprehension / OpenRange
OpenRange <- NumLiteral '..' NumLiteral?
Comprehension <- LSqB NamedRange ((Comma / BitOr) NamedRange)* ComprPipeline RSqB
NamedRange <- Name Colon OpenRange
ComprPipeline <- Arrow Expression (BitOr Expression)*

SumOps <- ('+' / '-')
MulOps <- ('*' / '/' / '%')
UnaryOps <- ('-' / '+' / '--' / '++' / '!' / '~')
PostfixOps <- ('--' / '++')
AssignOps <- ('+=' / '-=' / '^=' / '|=' / '&=' / '=')
EqualityOps <- ('==' / '!=')
CompareOps <- ('<=' / '>=' / '<' / '>')
ShiftOps <- ('<<' / '>>' / '>>>')

NumLiteral <- (HexNumLiteral / OctNumLiteral / BinNumLiteral / FloatNumLiteral / DecNumLiteral) NumSuffix?
HexNumLiteral <- '0x' <[0-9a-fA-F] [0-9a-fA-F_]*>
OctNumLiteral <- '0o' <[0-7] [0-7_]*>
BinNumLiteral <- '0b' <[01] [01_]*>
FloatNumLiteral <- <DecSegment '.' DecSegment (('e'/'E') ('+' / '-')? DecSegment)?>
DecNumLiteral <- <DecSegment>
DecSegment <- [0-9][0-9_]*
NumSuffix <- 'i8' / 'u8' / 'i16' / 'u16' / 'i32' / 'u32' / 'i64' / 'u64' / 'f16' / 'f32' / 'f64'

QualifiedName <- !('F"') <[_$@a-zA-Z] [_$.a-zA-Z0-9]*>
Name <- !('F"') <[_$@a-zA-Z] [_$a-zA-Z0-9]*>
CharLiteral <- [\'] <('\'' / ![\'] .)> [\']
StringLiteral <- InterpolatedStringLiteral / StringSegment+
StringSegment <- '"' < ('\\"' / !'"' .)* > '"'
#InterpolatedStringLiteral <- 'F"' < ('\\"' / !'"' .)* > '"'
InterpolatedStringLiteral <- 'F"(' < (!')"' .)* > ')"'
#InterpolatedStringLiteral <- 'F"' $tag<(.{0,8})> '(' < (!($tag ')"') .)* > ')"'
#InterpolatedStringLiteral <- 'F"' $tag<(.{0,8})> '(' <(!$tag .)*> ')' $tag '"'
#InterpolatedStringLiteral <- 'F"' $tag<(.{0,8})> '(' <(!(')' $tag '"') .)*> ')' $tag '"'

Semicolon <- ';'
Ellipsis <- '...'
Arrow <- '->'
LogicalAnd <- '&&'
LogicalOr <- '||'
BitAnd <- '&'
BitOr <- '|'
BitXor <- '^'
Comma <- ','
BlockStart <- '{'
BlockEnd <- '}'
LP <- '('
RP <- ')'
LSqB <- '['
RSqB <- ']'
Colon <- ':'

%whitespace <- [ \t\r\n]* / Comment*
Comment <- '//' (!end .)* &end
end <- eol / eof
eol <- '\r\n' / '\n' / '\r'
eof <- !.
