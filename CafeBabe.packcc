Program <- Use* Constant* Type* Extension* Function* Unsafe* Test* __ eof
Use <- __ 'use' QualifiedName ImportList? Semicolon ~{ syntax_error_at(auxil, $0s, $0e); }
Constant <- Public? __ 'const' (__ 'val' / TypeName) Name __ '=' Expression Semicolon  ~{ syntax_error_at(auxil, $0s, $0e); }
Type <- AnnotationRef* Public? __ 'type' TypeName __ '=' (ApiDecl / AnnotationDecl / TypeAliasDecl / CompoundTypeDecl / TupleDecl / ClassDecl)
Extension <- Public? __ 'extend' TypeName ApiRefs? ClassBlock
Function <- AnnotationRef* Public? MethodSignature MethodBody
Unsafe <- __ 'unsafe' BlockStart Constant* Type* Extension* Function* Test* BlockEnd
Test <- __ 'test' BlockStart Constant* Type* Extension* Function* Unsafe* BlockEnd

ImportList <- BlockStart NameWithAlias (Comma NameWithAlias)* BlockEnd ~{ syntax_error_at(auxil, $0s, $0e); }
NameWithAlias <- Name (__ 'as'  Name)? ~{ syntax_error_at(auxil, $0s, $0e); }
AnnotationRef <- __ '@' Name (LP ExpressionList? RP)?
ExpressionList <- Expression (Comma Expression)*
TupleDecl <- LP TypeName? (Comma TypeName)* OptionalEllipsis? RP Semicolon
ApiDecl <- __ 'api' CommonApiBody
TypeAliasDecl <- ArgumentType Semicolon
AnnotationDecl <- __ 'annotation' TypedArgDecl AnnotationBody
AnnotationBody <- BlockStart Statement* BlockEnd
CompoundTypeDecl <- (AndType / OrType)? (Semicolon / CommonApiDecl)
AndType <- TypeName (Comma TypeName)+
OrType <- TypeName (BitOr TypeName)+
OptionalEllipsis <- Comma Ellipsis

CommonApiDecl <- ApiRefs? CommonApiBody
ApiRefs <- Colon TypeNameList
CommonApiBody <- BlockStart  Constant* ((MethodSignature Semicolon) / StaticMethodImpl / DefaultMethodImpl)* NamedClassDecl* BlockEnd
MethodSignature <- TypeVarsDecl? (TypedFunction/UntypedFunction)
TypedFunction <- TypeName Name TypedArgDecl
UntypedFunction <- __ 'fn' Name OptionalNameList
OptionalNameList <- LP NameList? RP

ClassDecl <- __ 'class' ClassDataDecl? ApiRefs? (ClassBlock / Semicolon)
NamedClassDecl <- Public? __ 'class' TypeName ClassBody
ClassBody <- TypedArgDecl? ApiRefs? ClassBlock
TypedArgDecl <- LP TypedArgList? RP
ClassDataDecl <- LP ClassFields? RP
ClassFields <- ClassField (Comma ClassField)* OptionalEllipsis?
ClassField <- Mutable? TypedArgument
Mutable <- __ 'var'
ClassBlock <- BlockStart Constant* Constructor* Destructor? (StaticMethodImpl / Function / MethodImpl)* NamedClassDecl* BlockEnd
StaticMethodImpl <- Public? __ 'static' MethodSignature MethodBody
DefaultMethodImpl <- __ 'default' MethodSignature MethodBody
Constructor <- Public? Name TypedArgDecl MethodBody
Destructor <- Public? __ '#' Name LP RP MethodBody
Public <- __ 'pub'

MethodImpl <- __ 'impl' Name OptionalNameList MethodBody
MethodBody <- MethodExpression / MethodBlockBody
MethodExpression <- __ '=' Expression Semicolon

MethodBlockBody <- BlockStart Statement* BlockEnd
Statement <- ForStatement / IfExpression / SelectExpression / MatchExpression / ReturnStatement  / BreakStatement / ContinueStatement / VariableDeclaration / Assignment / IterableStatement / MethodBlockBody / ValueStatement
BreakStatement <- __ 'break' Semicolon
ContinueStatement <- __ 'continue' Semicolon
ValueStatement <- Value Semicolon
VariableDeclaration <- VarTitle Assignment
VarTitle <- __ ('val' / 'var' / TypeName)
Assignment <- AssignmentExpr Semicolon
AssignmentExpr <- RegularAssignment / ParallelAssignment
RegularAssignment <- QualifiedName AssignOps Expression
ParallelAssignment <- RequiredNameList __ '=' (TupleConstruction / Expression)
TupleConstruction <- LP ValueReference? Expression? (Comma Expression)* OptionalEllipsis? RP
RequiredNameList <- LP NameList RP
ForStatement <- __ 'for' ForSetup MethodBlockBody
ForSetup <- LP VarTitle Name Colon Expression RP
ReturnStatement <- __ 'return' Expression? Semicolon
IterableStatement <- Iterable Invoke* Semicolon
Invoke <- CallParameters / MethodCall / Index
MethodCall <- __ '.' QualifiedName Invoke?

TypeName <- Name TypeArguments? BitAnd? ArrayDecl*
ArrayDecl <- LSqB RSqB
TypeArguments <- __ '<' TypeNameList OptionalEllipsis? __ '>'
TypeVarsDecl <- __ '<' LimitedTypeName (Comma LimitedTypeName)* __ '>'
LimitedTypeName <- Name (Colon TypeName ('+'/'-')?)?
TypeNameList <- TypeName (Comma TypeName)*
TypedArgList <- TypedArgument (Comma TypedArgument)* OptionalEllipsis?
TypedArgument <- ArgumentType Name
ArgumentType <- TypeName (Arrow Ellipsis? TypeName)*
NameList <- Name (Comma Name)*

Expression <- IfExpression / SelectExpression / MatchExpression / TernaryExpression / Expr
IfExpression <- __ 'if' BooleanExpression MethodBlockBody (__ 'else' MethodBlockBody)?

SelectExpression <- __ 'select' NestedExpr SelectBody
SelectBody <- BlockStart SelectCase* Default? BlockEnd

MatchExpression <- __ 'match' NestedExpr MatchBody
MatchBody <- BlockStart MatchCase* Default? BlockEnd

TernaryExpression <- NestedExpr __ '?' Expression Colon Expression
BooleanExpression <- LP Expression RP
SelectCase <- __ 'case' CaseExpr Arrow Expression Semicolon
MatchCase <- TypeConstructor Arrow Expression Semicolon
Default <- __ 'default' Arrow Expression Semicolon
CaseExpr <- NumLiteral / StringLiteral / ObjConstruction
TypeConstructor <- TypeName / TypeArguments

Expr <- f:Or { $$ = expr_node(auxil, $$, f);} (LogicalOr n:Or { add_child_node($$, n); })*
Or <- And (LogicalAnd And)*
And <- BitwiseOr (BitOr BitwiseOr)*
BitwiseOr <- BitwiseXor (BitXor BitwiseXor)*
BitwiseXor <- BitwiseAnd (BitAnd BitwiseAnd)*
BitwiseAnd <- Equality (EqualityOps Equality)?
Equality <- Compare (Comparison / TypeCheck)?
Comparison <- CompareOps Compare
TypeCheck <- __ 'isA' TypeConstructor

Compare <- Shift (ShiftOps Shift)*
Shift <- Sum (SumOps Sum)*
Sum <- Product (MulOps Product)*
Product <- (Cast / UnaryOps)* (MethodReference / Value / NestedExpr / Ellipsis)
Cast <- LP TypeName RP
NestedExpr <- LP Expression RP
MethodReference <- QualifiedName? __ '::' Name

Value <- (ObjConstruction / ArrayConstruction / TupleConstruction / Lambda / QualifiedName / Iterable / LiteralValue) Invoke* PostfixOps?
LiteralValue <- NumLiteral / CharLiteral / StringLiteral
Index <- LSqB Expression RSqB
Lambda <- (SingleParamLambda / MultiparamLambda) Ellipsis? (Expression / MethodBlockBody)
SingleParamLambda <- (Name Arrow)+
MultiparamLambda <- TypeName? CallParameters Arrow

CallParameters <- TypeArguments? (NamedCallParameters/AnonymousCallParameters)
NamedCallParameters <- LP NamedAssignmentList RP
AnonymousCallParameters <- LP (ExpressionList OptionalEllipsis?)? RP
ObjConstruction <- TypeName? ObjConstructionBody
ObjConstructionBody <- BlockStart ValueReference? NamedAssignmentList BlockEnd
NamedAssignmentList <- NamedAssignment (Comma NamedAssignment)*
NamedAssignment <- Name __ '=' Expression
ValueReference <- QualifiedName Invoke* BitOr

ArrayConstruction <- LSqB ArrayElements?RSqB
ArrayElements <- ExpressionList Comma?
Iterable <- Comprehension / OpenRange
OpenRange <- NumLiteral __ '..' NumLiteral?
Comprehension <- LSqB NamedRange ((Comma / BitOr) NamedRange)* ComprPipeline RSqB
NamedRange <- Name Colon OpenRange
ComprPipeline <- Arrow Expression (BitOr Expression)*

SumOps <- __ ('+' / '-')
MulOps <- __ ('*' / '/' / '%')
UnaryOps <- __ ('-' / '+' / '--' / '++' / '!' / '~')
PostfixOps <- __ ('--' / '++')
AssignOps <- __ ('+=' / '-=' / '^=' / '|=' / '&=' / '=')
EqualityOps <- __ ('==' / '!=')
CompareOps <- __ ('<=' / '>=' / '<' / '>')
ShiftOps <- __ ('<<' / '>>' / '>>>')

NumLiteral <- (HexNumLiteral / OctNumLiteral / BinNumLiteral / FloatNumLiteral / DecNumLiteral) NumSuffix?
HexNumLiteral <- __ '0x' <[0-9a-fA-F] [0-9a-fA-F_]*> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
OctNumLiteral <- __ '0o' <[0-7] [0-7_]*> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
BinNumLiteral <- __ '0b' <[01] [01_]*> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
FloatNumLiteral <- __ <DecSegment '.' DecSegment (('e'/'E') ('+' / '-')? DecSegment)?> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
DecNumLiteral <- __ <DecSegment> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
DecSegment <- [0-9][0-9_]*
NumSuffix <- 'i8' / 'u8' / 'i16' / 'u16' / 'i32' / 'u32' / 'i64' / 'u64' / 'f16' / 'f32' / 'f64'

QualifiedName <- __ !('F"') <[_$@a-zA-Z] [_$.a-zA-Z0-9]*> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
Name <- __ !('F"') <[_$@a-zA-Z] [_$a-zA-Z0-9]*> __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
CharLiteral <- __ [\'] <('\'' / ![\'] .)> [\'] __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
StringLiteral <- InterpolatedStringLiteral / StringSegment+
StringSegment <- __ '"' < ('\\"' / !'"' .)* > '"' __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}
InterpolatedStringLiteral <- __ 'F"' < ('\\"' / !'"' .)* > '"' __ { $$ = new_simple_node(auxil, $$, $0, $0s, $0e);}

Semicolon <- __ ';' __
Ellipsis <- __ '...'
Arrow <- __ '->'
LogicalAnd <- __ '&&'
LogicalOr <- __ '||'
BitAnd <- __ '&'
BitOr <- __ '|'
BitXor <- __ '^'
Comma <- __ ','
BlockStart <- __ '{'
BlockEnd <- __ '}'
LP <- __ '('
RP <- __ ')'
LSqB <- __ '['
RSqB <- __ ']'
Colon <- __ ':'

__ <- [ \t\r\n]* Comment?
Comment <- '//' (!end .)* &end __?
end <- eol / eof
eol <- '\r\n' / '\n' / '\r'
eof <- !.

%auxil "input_reader_t*"
%value "ast_t*"
%header {

#define MAX_CHILDREN 16
struct ast_t;

typedef struct ast_t {
    const char* text;
    int start;
    int end;
    int child_count;
    struct ast_t* children[MAX_CHILDREN];
} ast_t;

typedef struct {
    const char* input;
    const char* ptr;
    char err_text[1024];
} input_reader_t;

#define PCC_GETCHAR(auxil)  read_input(auxil)
#define PCC_ERROR(auxil)
}

%source {
#include <stdarg.h>

static ast_t* alloc_node(const char* text, int start, int end) {
    ast_t* node = (ast_t*)malloc(sizeof(ast_t));
    node->text = text;
    node->start = start;
    node->end = end;
    node->child_count = 0;

    return node;
}

static void add_child_node(ast_t* parent, ast_t* child) {
    if (parent != NULL && child != NULL) {
        if (parent->child_count >= MAX_CHILDREN) {
            fprintf(stderr, "FATAL: Too many child nodes\n");
            exit(1);
        }

        parent->children[parent->child_count++] = child;
    }
}

static ast_t* expr_node(input_reader_t* reader, ast_t* parent, ast_t* child) {
    ast_t* node = alloc_node(NULL, 0, 0);
    add_child_node(parent, node);
    add_child_node(node, child);
    return node;
}

static ast_t* new_simple_node(input_reader_t* reader, ast_t* parent, const char* text, int start, int end) {
    ast_t* node = alloc_node(text, start, end);
    add_child_node(parent, node);
    return node;
}

static ast_t* add_child(input_reader_t* reader, ast_t* parent, ast_t* child, const char* text, int start, int end) {
//    ast_t* node = alloc_node(text, start, end);
    add_child_node(parent, child);
    return parent;
}

static int read_input(input_reader_t* source){
    if (!*source->ptr) {
        return -1;
    }
    return *source->ptr++;
}

static void syntax_error_at(input_reader_t* source, int start_pos, int end_pos) {
    const unsigned char* p = source->input + start_pos;
    const unsigned char* line = source->input + end_pos;
    int row = 1;
    int col = 1;

    while(p != line) {
        if (*p == '\n') {
            row++;
            col = 1;
        } else {
            col++;
        }
        p++;
    }

    fprintf(stderr, "Error at %d:%d\n", row, col);
    fputs(" > ", stderr);
    p = source->input + start_pos;
    while(p != line) {
        fputc(*p++, stderr);
    }

    fputc('[', stderr);

    while(*p && *p != '\n' && *p != '\r') {
        fputc(*p++, stderr);
    }

    fputs("]\n---", stderr);
    p = source->input + start_pos;
    while(p++ != line) {
        fputc('-', stderr);
    }
    fprintf(stderr, "^--- syntax error\n");
}

}

%%
#ifdef MAIN


#endif
